Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[INFO] Group mapping used: {'black': 0, 'white': 1}
Parameter 'function'=<function df_map.<locals>.<lambda> at 0x7f5abfb0dd00> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.
Map: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████| 10000/10000 [00:02<00:00, 4299.34 examples/s]
[INFO] Group mapping used: {'black': 0, 'white': 1}
Map: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:00<00:00, 3391.23 examples/s]
{'train_runtime': 0.8731, 'train_samples_per_second': 343.617, 'train_steps_per_second': 6.872, 'train_loss': 0.054808616638183594, 'epoch': 3.0}

=== Iteration 1 ===
[INFO] Group mapping used: {'black': 0, 'white': 1}
Map: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:00<00:00, 3179.38 examples/s]
Casting the dataset: 100%|███████████████████████████████████████████████████████████████████████████████████████████| 10000/10000 [00:00<00:00, 438093.17 examples/s]
Lambda: 0.0000, Violation: -0.4991
[Epoch 1, Batch 1/157] Loss: -0.0081, Violation: -0.4991
Lambda: 0.0000, Violation: -0.4984
[Epoch 1, Batch 157/157] Loss: nan, Violation: -0.4984
Lambda: 0.0000, Violation: -0.4986
[Epoch 2, Batch 1/157] Loss: -0.0549, Violation: -0.4986
Lambda: 0.0000, Violation: -0.4953
[Epoch 2, Batch 157/157] Loss: -0.0065, Violation: -0.4953
Lambda: 0.0000, Violation: -0.4946
[Epoch 3, Batch 1/157] Loss: -0.0520, Violation: -0.4946
Lambda: 0.0000, Violation: -0.4898
[Epoch 3, Batch 157/157] Loss: -0.0709, Violation: -0.4898
Training done for C-ERM
Start Calculation of AUC on whole D -> might take a while
Traceback (most recent call last):
  File "/mnt/sda/david/activeAuditing/new_activeAuditing/AcitveAuditing_140725_refactored/main.py", line 55, in <module>
    main()
  File "/mnt/sda/david/activeAuditing/new_activeAuditing/AcitveAuditing_140725_refactored/main.py", line 51, in main
    runner.run()
  File "/mnt/sda/david/activeAuditing/new_activeAuditing/AcitveAuditing_140725_refactored/audit_run.py", line 142, in run
    T = self.refine_until_converged(surrogate, tokenizer, base_model, inputs_D, df_D_mapped, S)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/sda/david/activeAuditing/new_activeAuditing/AcitveAuditing_140725_refactored/audit_run.py", line 68, in refine_until_converged
    delta1, eval_h1 = eval_h(
                      ^^^^^^^
  File "/mnt/sda/david/activeAuditing/new_activeAuditing/AcitveAuditing_140725_refactored/optimization.py", line 41, in eval_h
    pred_h = compute_group_auc_diff_fn(h, inputs_D, df_D)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/copresence/miniconda3/envs/NLP/lib/python3.12/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/sda/david/activeAuditing/new_activeAuditing/AcitveAuditing_140725_refactored/surrogate_model.py", line 81, in compute_group_auc_difference
    groups = torch.tensor(dataset["group"].values).to(device)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint64, uint32, uint16, uint8, and bool.
